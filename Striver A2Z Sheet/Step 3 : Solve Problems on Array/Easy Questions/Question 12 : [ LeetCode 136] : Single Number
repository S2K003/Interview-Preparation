"""
Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

Example 1:
Input: nums = [2,2,1]
Output: 1

Example 2:
Input: nums = [4,1,2,1,2]
Output: 4

Example 3:
Input: nums = [1]
Output: 1

"""

#Code
#Lesser Optimal Solution using Hash Map Methodology which allows frequency counting
class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        mp = {}
        for ele in nums:
            mp[ele] = mp.get(ele,0) + 1
        for num,value in mp.items():
            if value == 1:
                return num
        
#Code
#Optimal Approach using XOR Methodology
class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        xor =0 
        for ele in nums:
            xor ^= ele
        return xor
        