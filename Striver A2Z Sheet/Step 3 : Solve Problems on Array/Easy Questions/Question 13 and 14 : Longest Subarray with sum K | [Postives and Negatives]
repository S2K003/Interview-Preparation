"""
Longest Subarray With Sum K [ Positive / Negative ]
https://www.geeksforgeeks.org/longest-sub-array-sum-k/#expected-approach-using-hash-map-and-prefix-sum-on-time-and-on-space
Given an array arr[] of size n containing integers, the task is to find the length of the longest subarray having sum equal to the given value k.
Note: If there is no subarray with sum equal to k, return 0.

Examples: 
Input: arr[] = [10, 5, 2, 7, 1, -10], k = 15
Output: 6
Explanation: Subarrays with sum = 15 are [5, 2, 7, 1], [10, 5] and [10, 5, 2, 7, 1, -10]. The length of the longest subarray with a sum of 15 is 6.

Input: arr[] = [-5, 8, -14, 2, 4, 12], k = -5
Output: 5
Explanation: Only subarray with sum = 15 is [-5, 8, -14, 2, 4] of length 5.

Input: arr[] = [10, -10, 20, 30], k = 5
Output: 0
Explanation: No subarray with sum = 5 is present in arr[].
"""
#Code
#Longest Subarray
def longestsubarray(arr,k):
    mp = {}
    res = 0
    prefixsum = 0
    
    for i in range(len(arr)):
        prefixsum += arr[i]
        
        if prefixsum == k:
            res = i+1
        
        elif (prefixsum - k) in mp:
            res = max(res,i-mp[prefixsum - k])
        
        if prefixsum not in mp:
            mp[prefixsum] = i
    
    return res

#Main Function Code
if __name__ == "__main__":
    arr = [10, 5, 2, 7, 1, -10]
    k = 15
    print(longestsubarray(arr, k))
