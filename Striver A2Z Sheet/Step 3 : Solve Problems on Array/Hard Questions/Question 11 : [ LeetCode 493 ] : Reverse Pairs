"""
Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where:

0 <= i < j < nums.length and
nums[i] > 2 * nums[j].
 

Example 1:
Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1

Example 2:
Input: nums = [2,4,3,5,1]
Output: 3
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1
(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1


"""

#Code
class Solution(object):
    def reversePairs(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        def merge_sort(start,end):
            if start>=end:
                return 0
            mid = (start+end)//2
            count = merge_sort(start,mid) + merge_sort(mid+1,end)

            i = start
            j = mid + 1

            while i<=mid and j<=end:
                if nums[i] > 2 * nums[j]:
                    count+= mid - i + 1
                    j+=1
                else:
                    i+=1
            
            nums[start:end+1] = sorted(nums[start:end+1])

            return count
        
        return merge_sort(0,len(nums)-1)
        