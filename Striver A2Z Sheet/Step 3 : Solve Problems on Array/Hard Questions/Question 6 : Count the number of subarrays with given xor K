"""
Problem Statement: Given an array of integers A and an integer B. Find the total number of subarrays having bitwise XOR of all elements equal to k.

Pre-requisite: Find the number of subarrays with the sum K
Examples
Example 1:
Input Format: A = [4, 2, 2, 6, 4] , k = 6
Result: 4
Explanation: The subarrays having XOR of their elements as 6 are  [4, 2], [4, 2, 2, 6, 4], [2, 2, 6], [6]

Example 2:
Input Format: A = [5, 6, 7, 8, 9], k = 5
Result: 2
Explanation: The subarrays having XOR of their elements as 5 are [5] and [5, 6, 7, 8, 9]
"""

#Code
from collections import defaultdict
def subarraysWithXorK(nums,k):
    mp = defaultdict(int)
    n = len(nums)
    xr = 0
    mp[xr] = 1
    count = 0
    for i in range(n):
        xr = xr ^ nums[i]
        x = xr ^ k
        count = count + mp[x]
        mp[xr]+=1
    return count
        
    
if __name__ == "__main__":
    arr = [4, 2, 2, 6, 4]
    k = 6
    ans = subarraysWithXorK(arr, k)
    print("The number of subarrays with XOR k is:", ans)