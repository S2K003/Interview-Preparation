"""
Problem Statement: Given a sorted array of N integers and an integer x, write a program to find the upper bound of x.

Pre-requisite: Binary Search algorithm

Examples

Example 1:
Input Format: N = 4, arr[] = {1,2,2,3}, x = 2
Result: 3
Explanation: Index 3 is the smallest index such that arr[3] > x.

Example 2:
Input Format: N = 6, arr[] = {3,5,8,9,15,19}, x = 9
Result: 4
Explanation: Index 4 is the smallest index such that arr[4] > x.

Disclaimer: Donâ€™t jump directly to the solution, try it out yourself first.

Solution:
In the preceding article, we comprehensively explored the implementation of the Binary Search algorithm and the lower bound algorithm. 

The primary objective of the Binary Search algorithm is to efficiently determine the appropriate half to eliminate, thereby reducing the search space by half. It does this by determining a specific condition that ensures that the target is not present in that half.

In this article, we will learn how to implement the upper bound algorithm using a slight modification of the Binary Search algorithm. 
"""

#Code
def upperbound(arr,n,target):
    low = 0
    high = n-1
    res = n
    while low<=high:
        mid = (low+high)//2
        if arr[mid]>target:
            res = mid
            high = mid-1
        else:
            low = mid+1
    return res
    
if __name__ == "__main__":
    arr = [3,5,8,15,19]
    n = len(arr)
    target = 9
    print(upperbound(arr,n,target))
