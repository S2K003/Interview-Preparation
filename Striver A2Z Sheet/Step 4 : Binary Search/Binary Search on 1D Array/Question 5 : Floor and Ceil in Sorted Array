"""
Problem Statement: You're given an sorted array arr of n integers and an integer x. Find the floor and ceiling of x in arr[0..n-1].
The floor of x is the largest element in the array which is smaller than or equal to x.
The ceiling of x is the smallest element in the array greater than or equal to x.

Pre-requisite: Lower Bound & Binary Search

Example 1:
Input Format: n = 6, arr[] ={3, 4, 4, 7, 8, 10}, x= 5
Result: 4 7
Explanation: The floor of 5 in the array is 4, and the ceiling of 5 in the array is 7.

Example 2:
Input Format: n = 6, arr[] ={3, 4, 4, 7, 8, 10}, x= 8
Result: 8 8
Explanation: The floor of 8 in the array is 8, and the ceiling of 8 in the array is also 8.
"""

#Code
#Code
def find_floor_ceil(arr,target):
    n = len(arr)
    low = 0
    high = n-1
    floor,ceil = -1,-1
    while low<=high:
        mid = (low+high)//2
        if arr[mid]==target:
            floor = ceil = arr[mid]
            break
        elif arr[mid]>target:
            ceil = arr[mid]
            high = mid-1
        else:
            floor = arr[mid]
            low = mid+1
    return floor,ceil
arr1 = [3, 4, 4, 7, 8, 10]
x1 = 5
floor1, ceil1 = find_floor_ceil(arr1, x1)
print(f"{floor1} {ceil1}")  # Output: 4 7