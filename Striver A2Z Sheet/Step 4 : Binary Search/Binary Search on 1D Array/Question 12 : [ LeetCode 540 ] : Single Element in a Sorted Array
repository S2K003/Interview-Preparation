"""
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 

Example 1:
Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2

Example 2:
Input: nums = [3,3,7,7,10,11,11]
Output: 10
"""

#Code
class Solution(object):
    def singleNonDuplicate(self, nums):
        left = 0
        right = len(nums) - 1

        while left < right:
            mid = (left + right) // 2

            # Ensure mid is even, so we always compare mid and mid + 1
            if mid % 2 == 1:
                mid -= 1

            # If the pair is intact 
            if nums[mid] == nums[mid + 1]:
                # The single element must be on the right side
                left = mid + 2
            else:
                # The single element is on the left side (including mid)
                right = mid

        # Left will eventually point to the single element
        return nums[left]

